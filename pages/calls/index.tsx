import type { NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { getRequest, putRequest } from '../../api'
import ENDPOINTS from '../../api/endpoints'
import Button from '../../globals/components/button/Button'
import Table from '../../globals/components/table/Table'
import Paginator from "../../globals/components/paginator/Paginator";
import Link from 'next/link'
import styles from './table.module.scss'

const Home: NextPage = () => {

    const [data, setData] = useState([]);
    const [dataCount, setDataCount] = useState(0);
    const [hasNextPage, setHasNextPage] = useState(false);
    const [activePage, setActivePage] = useState(1);

    const [checkedCalls, setCheckedCalls] = useState([]);
    const [allChecked, setAllChecked] = useState(false);

    useEffect(() => {
        fetchCalls()
        setAllChecked(false)
        setCheckedCalls([])
    }, [activePage])

    const COLUMNS = [
        {
            checkbox: true
        },
        {
            title: 'From',
            dataKey: 'from'
        },
        {
            title: 'To',
            dataKey: 'to'
        },
        {
            title: 'Call type',
            dataKey: 'call_type',
        },
        {
            title: 'Duration',
            dataKey: 'duration'
        },
        {
            title: 'Date/Time',
            dataKey: 'created_at',
        },
        {
            title: 'Action',
            dataKey: '',
            render: (item: { is_archived: any; id: any }) => {
                return (
                    <div className={styles.actionTd}>
                        <Link href={`/calls/${item.id}`} >Details</Link>
                        {!item.is_archived && <Button size='sm' onClick={() => archiveCall(item.id)} title='Archive' />}
                    </div>
                )
            }
        }
    ]

    async function fetchCalls() {
        try {
            const offset = ((activePage - 1) * 10).toString();
            const URL = ENDPOINTS.calls.getCallsList.replace(':offset', offset).replace(':limit', '10');
            const { nodes, totalCount, hasNextPage } = await getRequest(URL);

            if (typeof nodes !== 'undefined' || typeof totalCount !== 'undefined' || typeof hasNextPage !== 'undefined') {
                setData(nodes);
                setDataCount(totalCount);
                setHasNextPage(hasNextPage)
            } else {
                setData([]);
                setDataCount(0);
                setHasNextPage(false);
            }

        } catch (e) {
            console.error(e);
        }
    }

    async function archiveCall(id: string) {
        try {
            const URL = ENDPOINTS.calls.archiveCall.replace(':id', id);
            await putRequest(URL);
            fetchCalls()
        } catch (e) {
            console.log(e)
        }
    }

    async function archiveMultipleCalls() {
        try {
            for (const id of checkedCalls) {
                const URL = ENDPOINTS.calls.archiveCall.replace(':id', id);
                await putRequest(URL);
            }
            fetchCalls()
            setAllChecked(false)
            setCheckedCalls([])
        } catch (e) {
            console.log(e)
        }
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div>
                <Table columns={COLUMNS} data={data} />

                <Paginator
                    dataCount={dataCount}
                    hasNextPage={hasNextPage}
                    activePage={activePage}
                    handlePageChange={(value: number) => setActivePage(value)}
                />
            </div>

        </div>
    )
}

export default Home
